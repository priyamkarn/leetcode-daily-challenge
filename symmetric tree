1. bool isSymmetric(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root->left);
        q.push(root->right);
        while(!q.empty())
        {
            TreeNode* leftnode=q.front();
            q.pop();
            TreeNode* rightnode=q.front();
            q.pop();
            if(leftnode == NULL && rightnode==  NULL)
            {
                continue;
            }
            if(leftnode == NULL || rightnode==  NULL)
            {
                return false;
            }
            if(leftnode->val!=rightnode->val)
            {
                return false;
            }
            q.push(leftnode->left);
            q.push(rightnode->right);
            q.push(leftnode->right);
            q.push(rightnode->left);
        }
        return true;
    }
    2.
    bool solve(TreeNode* leftnode,TreeNode* rightnode)
{
    if(leftnode==NULL && rightnode==NULL)
    {
        return true;
    }
    if(leftnode==NULL || rightnode==NULL)
    {
        return false;
    }
    if(leftnode->val!=rightnode->val)
    {
        return false;
    }
    return solve(leftnode->left,rightnode->right) && solve(leftnode->right,rightnode->left);
}
    bool isSymmetric(TreeNode* root) {
        return solve(root->left,root->right);
    }
